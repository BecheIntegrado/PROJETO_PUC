import tkinter as tk
from tkinter import messagebox
from control.cControlFunc import *
from datetime import datetime

class TelaPonto(tk.Toplevel):
    def __init__(self, master):
        super().__init__(master)
        self.title("Registro Ponto")
        self.state("zoomed")

        self.label_titulo = tk.Label(self, text="Registro de Ponto", font=("Arial", 20, "bold"))
        self.label_titulo.pack(pady=20)

        self.frame_campos = tk.Frame(self)
        self.frame_campos.pack(padx=20, pady=10)

        self.label_cd_func = tk.Label(self.frame_campos, text="Funcionario:", font=("Arial", 14))
        self.label_cd_func.grid(row=1, column=0, pady=5, sticky="w")
        self.entry_cd_func = tk.Entry(self.frame_campos, font=("Arial", 14), width=5)
        self.entry_cd_func.bind("<KeyPress-Tab>", self.getNomeFunc)
        self.entry_cd_func.grid(row=1, column=1, pady=5, sticky="w")
        self.entry_nm_func = tk.Entry(self.frame_campos, font=("Arial", 14))
        self.entry_nm_func.grid(row=1, column=2, pady=5, sticky="w")
        self.entry_nm_func.bind("<Key>", self.getNomeFunc)

        self.horario = tk.Label(self.frame_campos, text="", font=("Arial", 14))
        self.horario.grid(row=2, column=0, pady=5)

        self.data = tk.Label(self.frame_campos, text="", font=("Arial", 14))
        self.data.grid(row=2, column=1, pady=5)

        self.btn_salvar = tk.Button(self.frame_campos, text="Salvar", command=self.registrar_ponto)
        self.btn_salvar.grid(row=3, column=0, pady=5, padx=5)

        self.btn_limpar = tk.Button(self.frame_campos, text="Limpar", command=self.limpar_campos)
        self.btn_limpar.grid(row=3, column=1, pady=5, padx=5)

        self.btn_voltar = tk.Button(self.frame_campos, text="Voltar", command=self.voltar_menu)
        self.btn_voltar.grid(row=3, column=2, pady=5, padx=5)

        self.atualizar_data()

    def getNomeFunc(self, event):
        cd_func = self.entry_cd_func.get()

        buscaFunc = cGetFuncionario(cd_func = cd_func)

        nomeFunc  = buscaFunc.getNameFunc()

        print(nomeFunc)

        if not nomeFunc:
            messagebox.showerror("Erro", "Funcionario n√£o encontrado.")
            return

        self.entry_nm_func.delete(0, tk.END)
        self.entry_nm_func.insert(0, nomeFunc[0].nm_func + ' ' + nomeFunc[0].nm_sobrenome)

        return nomeFunc

    def atualizar_data(self):
        hora_atual = datetime.now().strftime("%H:%M:%S")
        data_atual = datetime.now().strftime("%d/%m/%Y")
        self.horario.config(text=hora_atual)
        self.data.config(text=data_atual)
        self.after(1000, self.atualizar_data)

    def voltar_menu(self):
        self.destroy()
        self.master.deiconify()
        self.master.state("zoomed")

    def registrar_ponto(self):
        cd_func = self.entry_cd_func.get()
        hora_registro = datetime.now().strftime("%H:%M:%S")
        data_registro = datetime.now().strftime("%d/%m/%Y")

        if not cd_func:
            messagebox.showerror("Erro", "Por favor, informe o funcionario.")
            return

        salvarPonto = cPonto(cd_func=cd_func, data_registro = data_registro)
        salvarPonto.setPonto()

        self.limpar_campos()

        messagebox.showinfo("Sucesso",  f"{hora_registro} \n {data_registro} \n {cd_func}.")

    def limpar_campos(self):
        self.entry_cd_func.delete(0, tk.END)
        self.entry_nm_func.delete(0, tk.END)
